FuRegisterClass("UniTextPlusControls", CT_Tool, {
	REGS_Name             = "UniText+Controls",
	REGS_Category         = "SmartEdit",
	REGS_OpIconString     = "SeUt+C",
	REGS_OpDescription    = "",
	REG_OpNoMask          = true,
	REG_NoBlendCtrls      = true,
	REG_NoObjMatCtrls     = true,
	REG_NoMotionBlurCtrls = true,
	-- REG_Fuse_NoEdit       = true,
	-- REG_Fuse_NoReload     = true,
	REG_Fuse_NoEdit       = false,
	REG_Fuse_NoReload     = false,
	-- REG_Version        = 1,
})

function Create()
	self:RemoveControlPage("Controls")
	self:AddControlPage("UniText+")

	self:BeginControlNest("Copy Style from Media Pool", "CopyStyleLabel", true, {});

	InCopyStyleForClip = self:AddInput("for This Clip", "CopyStyleForClip", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ButtonControl",
		BTNCS_Execute      =
		"!Py: from dvr_smart_edit.entrypoints import setup_module; setup_module(bmd, resolve, fusion); from dvr_smart_edit.entrypoints import uni_textplus_clip; uni_textplus_clip.on_copy_style_for_clip(comp)",
		ICD_Width          = 0.3,
		INP_External       = false,
		INP_Passive        = true,
	})

	InCopyStyleForTrack = self:AddInput("for This Track", "CopyStyleForTrack", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ButtonControl",
		BTNCS_Execute      =
		"!Py: from dvr_smart_edit.entrypoints import setup_module; setup_module(bmd, resolve, fusion); from dvr_smart_edit.entrypoints import uni_textplus_clip; uni_textplus_clip.on_copy_style_for_track(comp)",
		ICD_Width          = 0.3,
		INP_External       = false,
		INP_Passive        = true,
	})

	InCopyStyleForAll = self:AddInput("for All", "CopyStyleForAll", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ButtonControl",
		BTNCS_Execute      =
		"!Py: from dvr_smart_edit.entrypoints import setup_module; setup_module(bmd, resolve, fusion); from dvr_smart_edit.entrypoints import uni_textplus_clip; uni_textplus_clip.on_copy_style_for_all()",
		ICD_Width          = 0.3,
		INP_External       = false,
		INP_Passive        = true,
	})

	self:EndControlNest()

	self:BeginControlNest("Subtitle Generation", "SubtitleGenerationLabel", true, {});

	InImportSrtForTrack = self:AddInput("Import Srt to This Track", "ImportSrtForTrack", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ButtonControl",
		BTNCS_Execute      =
		"!Py: from dvr_smart_edit.entrypoints import setup_module; setup_module(bmd, resolve, fusion); from dvr_smart_edit.entrypoints import uni_textplus_clip; uni_textplus_clip.on_import_srt_for_track(comp)",
		ICD_Width          = 1.0,
		INP_External       = false,
		INP_Passive        = true,
	})

	InExportSrtLabel = self:AddInput("Export Srt", "ExportSrtLabel", {
		LINKID_DataType    = "Text",
		INPID_InputControl = "LabelControl",
		ICD_Width          = 1.0,
		INP_External       = false,
		INP_Passive        = true,
	})

	InExportSrtForTrack = self:AddInput("for This Track", "ExportSrtForTrack", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ButtonControl",
		BTNCS_Execute      =
		"!Py: from dvr_smart_edit.entrypoints import setup_module; setup_module(bmd, resolve, fusion); from dvr_smart_edit.entrypoints import uni_textplus_clip; uni_textplus_clip.on_export_srt_for_track(comp)",
		ICD_Width          = 0.5,
		INP_External       = false,
		INP_Passive        = true,
	})

	InExportSrtForAll = self:AddInput("for All (WIP)", "ExportSrtForAll", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ButtonControl",
		BTNCS_Execute      =
		"!Py: from dvr_smart_edit.entrypoints import setup_module; setup_module(bmd, resolve, fusion); from dvr_smart_edit.entrypoints import uni_textplus_clip; uni_textplus_clip.on_export_srt_for_all()",
		ICD_Width          = 0.5,
		INP_External       = false,
		INP_Passive        = true,
	})

	self:EndControlNest()

	self:BeginControlNest("Text Area", "TextAreaLabel", true, {});

	InFitToTextArea = self:AddInput("Fit To TextArea", "FitToTextArea", {
		LINKID_DataType        = "Number",
		INPID_InputControl     = "CheckboxControl",
		INP_Default            = 1.0,
		INP_DoNotifyChanged    = true,
		INP_External           = false,
		INP_InteractivePassive = true,
	})

	self:EndControlNest()

	InSavedLayoutSize = self:AddInput("Layout Size", "SavedLayoutSize", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "None",
		INP_Default        = 1.0,
		INP_External       = false,
		INP_Passive        = true,
	})

	InSavedLineSizeX = self:AddInput("Layout Size", "SavedLineSizeX", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "None",
		INP_Default        = 1.0,
		INP_External       = false,
		INP_Passive        = true,
	})

	InTextPlus = self:AddInput("Text+", "TextPlus", {
		LINKID_DataType = "Image",
		LINK_Main       = 1,
	})

	InDataWindowRef = self:AddInput("DataWindowReference", "DataWindowReference", {
		LINKID_DataType = "Image",
		LINK_Main       = 2,
	})

	InTextArea = self:AddInput("TextArea", "TextArea", {
		LINKID_DataType = "Image",
		LINK_Main       = 3,
	})

	OutImage = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main       = 1,
	})
end

function NotifyChanged(inp, param, time)
	if inp ~= nil and param ~= nil then
		if inp == InFitToTextArea then
			if param.Value == 1.0 then
				self:GetComp():Execute(
					"!Py: from dvr_smart_edit.entrypoints import setup_module; setup_module(bmd, resolve, fusion); from dvr_smart_edit.entrypoints import uni_textplus_clip; uni_textplus_clip.on_enable_fit_to_textarea(comp, '" ..
					self.Name .. "')")
			else
				self:GetComp():Execute(
					"!Py: from dvr_smart_edit.entrypoints import setup_module; setup_module(bmd, resolve, fusion); from dvr_smart_edit.entrypoints import uni_textplus_clip; uni_textplus_clip.on_disable_fit_to_textarea(comp, '" ..
					self.Name .. "')")
			end
		end
	end
end

function Process(req)
	p = Pixel({ R = 0, G = 0, B = 0, A = 0 })

	out = Image({})
	out:Fill(p)

	OutImage:Set(req, out)
end
